-- MySQL Script generated by MySQL Workbench
-- Fri Mar 16 09:48:35 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema Orderhanteringssystem
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema Orderhanteringssystem
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `Orderhanteringssystem` DEFAULT CHARACTER SET utf8 ;
USE `Orderhanteringssystem` ;

-- -----------------------------------------------------
-- Table `Orderhanteringssystem`.`Person`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Orderhanteringssystem`.`Person` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `FirstName` VARCHAR(45) NULL,
  `LastName` VARCHAR(45) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Orderhanteringssystem`.`Car`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Orderhanteringssystem`.`Car` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `Brand` VARCHAR(45) NULL,
  `Owner` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_Car_Person_idx` (`Owner` ASC),
  CONSTRAINT `fk_Car_Person`
    FOREIGN KEY (`Owner`)
    REFERENCES `Orderhanteringssystem`.`Person` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Orderhanteringssystem`.`Orderrad`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Orderhanteringssystem`.`Orderrad` (
  `Id` INT NOT NULL AUTO_INCREMENT,
  `Amount` INT NULL,
  `Price` INT NULL,
  `Sum` INT NULL,
  PRIMARY KEY (`Id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Orderhanteringssystem`.`Produkt`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Orderhanteringssystem`.`Produkt` (
  `Id` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NULL,
  `Price` INT NULL,
  `Category` VARCHAR(45) NULL,
  `Rea` VARCHAR(45) NULL,
  `Orderrad_Id` INT NOT NULL,
  PRIMARY KEY (`Id`),
  INDEX `fk_Produkt_Orderrad1_idx` (`Orderrad_Id` ASC),
  CONSTRAINT `fk_Produkt_Orderrad1`
    FOREIGN KEY (`Orderrad_Id`)
    REFERENCES `Orderhanteringssystem`.`Orderrad` (`Id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Orderhanteringssystem`.`Customers`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Orderhanteringssystem`.`Customers` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NULL,
  `Adres` VARCHAR(45) NULL,
  `City` VARCHAR(45) NULL,
  `Postnr` INT NULL,
  `E-Mail` VARCHAR(45) NULL,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Orderhanteringssystem`.`Order`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Orderhanteringssystem`.`Order` (
  `Id` INT NOT NULL AUTO_INCREMENT,
  `Date` DATETIME NULL,
  `Sum` VARCHAR(45) NULL,
  `Customers_ID` INT NOT NULL,
  PRIMARY KEY (`Id`, `Customers_ID`),
  INDEX `fk_Order_Customers1_idx` (`Customers_ID` ASC),
  CONSTRAINT `fk_Order_Customers1`
    FOREIGN KEY (`Customers_ID`)
    REFERENCES `Orderhanteringssystem`.`Customers` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Orderhanteringssystem`.`OrderTable_has_Orderrad`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Orderhanteringssystem`.`OrderTable_has_Orderrad` (
  `Order_Id` INT NOT NULL,
  `Orderrad_Id` INT NOT NULL,
  PRIMARY KEY (`Order_Id`, `Orderrad_Id`),
  INDEX `fk_OrderTable_has_Orderrad_Orderrad1_idx` (`Orderrad_Id` ASC),
  INDEX `fk_OrderTable_has_Orderrad_OrderTable1_idx` (`Order_Id` ASC),
  CONSTRAINT `fk_OrderTable_has_Orderrad_OrderTable1`
    FOREIGN KEY (`Order_Id`)
    REFERENCES `Orderhanteringssystem`.`Order` (`Id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_OrderTable_has_Orderrad_Orderrad1`
    FOREIGN KEY (`Orderrad_Id`)
    REFERENCES `Orderhanteringssystem`.`Orderrad` (`Id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Orderhanteringssystem`.`Company Purchases`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Orderhanteringssystem`.`Company Purchases` (
  `Id` INT NOT NULL AUTO_INCREMENT,
  `Buy` INT NULL,
  `Sale` INT NULL,
  `Profits` INT NULL,
  `ProductName` VARCHAR(45) NULL,
  `Sum` INT NULL,
  PRIMARY KEY (`Id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Orderhanteringssystem`.`Company Purchases_has_Produkt`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Orderhanteringssystem`.`Company Purchases_has_Produkt` (
  `Company Purchases_Id` INT NOT NULL,
  `Produkt_Id` INT NOT NULL,
  PRIMARY KEY (`Company Purchases_Id`, `Produkt_Id`),
  INDEX `fk_Company Purchases_has_Produkt_Produkt1_idx` (`Produkt_Id` ASC),
  INDEX `fk_Company Purchases_has_Produkt_Company Purchases1_idx` (`Company Purchases_Id` ASC),
  CONSTRAINT `fk_Company Purchases_has_Produkt_Company Purchases1`
    FOREIGN KEY (`Company Purchases_Id`)
    REFERENCES `Orderhanteringssystem`.`Company Purchases` (`Id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Company Purchases_has_Produkt_Produkt1`
    FOREIGN KEY (`Produkt_Id`)
    REFERENCES `Orderhanteringssystem`.`Produkt` (`Id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Orderhanteringssystem`.`OfficeSpace`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Orderhanteringssystem`.`OfficeSpace` (
  `Id` INT NOT NULL AUTO_INCREMENT,
  `Location` VARCHAR(45) NULL,
  `PhoneNr` INT NULL,
  `Employees` INT NULL,
  PRIMARY KEY (`Id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Orderhanteringssystem`.`OfficeSpace_has_Company Purchases`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Orderhanteringssystem`.`OfficeSpace_has_Company Purchases` (
  `OfficeSpace_Id` INT NOT NULL,
  `Company Purchases_Id` INT NOT NULL,
  PRIMARY KEY (`OfficeSpace_Id`, `Company Purchases_Id`),
  INDEX `fk_OfficeSpace_has_Company Purchases_Company Purchases1_idx` (`Company Purchases_Id` ASC),
  INDEX `fk_OfficeSpace_has_Company Purchases_OfficeSpace1_idx` (`OfficeSpace_Id` ASC),
  CONSTRAINT `fk_OfficeSpace_has_Company Purchases_OfficeSpace1`
    FOREIGN KEY (`OfficeSpace_Id`)
    REFERENCES `Orderhanteringssystem`.`OfficeSpace` (`Id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_OfficeSpace_has_Company Purchases_Company Purchases1`
    FOREIGN KEY (`Company Purchases_Id`)
    REFERENCES `Orderhanteringssystem`.`Company Purchases` (`Id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Orderhanteringssystem`.`Employees`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Orderhanteringssystem`.`Employees` (
  `Id` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NULL,
  `PhoneNr` INT NULL,
  `Email` VARCHAR(45) NULL,
  `OfficeSpace_Id` INT NOT NULL,
  PRIMARY KEY (`Id`),
  INDEX `fk_Employees_OfficeSpace1_idx` (`OfficeSpace_Id` ASC),
  CONSTRAINT `fk_Employees_OfficeSpace1`
    FOREIGN KEY (`OfficeSpace_Id`)
    REFERENCES `Orderhanteringssystem`.`OfficeSpace` (`Id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
